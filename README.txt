Utube Backend
Краткое описание:
Бэкенд проекта социальной сети, ориентированной на видеоконтент, на Django.
Проект включает в себя такие возможности, как:
o	регистрация и авторизация пользователей;
o	поиск и просмотр загруженных пользователями видеороликов;
o	добавление и управление видеороликами зарегистрированными пользователями;
o	связи пользователей друг с другом через чаты (ЛС и групповые);
o	рассылка уведомлений по разным каналам связи.

Полное описание:
1. Данный репозиторий содержит бэкенд-часть фуллстэк-проекта Utube, разработанную на Django.
    Большая часть пользовательского интерфейса перенесена на React-фронтенд, однако в проекте используется несколько
    серверно-сгенерированных страниц:
    127.0.0.1:8000/ - страница приветствия пользователей после регистрации, с кратким описанием функционала портала и
    возможностью подключения пуш-уведомлений.
    127.0.0.1:8000/personal  - личный кабинет пользователя, где могут быть отредактированы его данные (изменен аватар,
    управление подписками и т.п.)
2. БД: PostgreSQL
3. Хранение медиафайлов (видео): папка /media на сервере.
4. Аутентификация / регистрация: allauth.
    - Создана кастомизированная модель пользователя (CustomUser) с дополнительным полем "phone";
    - Создана кастомизированная форма регистрации (signup) пользователя, запрашивающая email, юзернейм и номер телефона;
    - Предусмотрена возможность входа (signin) через стороннюю учетную запись (Google);
    - Настроена возможность рассылки писем пользователям, в т.ч. при регистрации.
    - Реализованы возможности BasicAuthentication и SessionAuthentication юзера.
    - О подтверждении телефонного номера юзера после регистрации - см. п.9 ниже.
5. Модели:
    - Модель Video содержит поле FileField для хранения пути к видеофайлам;
    - Поиск по моделям: для поиска видео по описанию, хэшетгам и комментариям реализован отдельный метод search_video
    (см. файл search.py);
6. Тесты: cтандартная библиотека unittest
    - В tests.py добавлены тесты для основных моделей (Author, Video, Comment);
    - Добавлены тесты для проверки корректной работы метода search_video.
    - Добавлены тесты API (для основных моделей, по которым будет вестись поиск/создание/удаление объектов);
    - Подключены Github Actions для автоматического запуска тестов при загрузке в репозиторий.
7. API: Django RestAPI.
     Для реализации представлений использован класс ViewSet.
     Подключен Swagger: 127.0.0.1:8000/swagger-ui/
     API для аутентификации и авторизации юзера:
     -  url: 127.0.0.1:8000/personal/login/ - логин юзера с фронтенда по юзернейму/паролю;
     -  url: 127.0.0.1:8000/api/current/ - проверка текущей сессии; если юзер уже авторизован, возвращает его данные.
     API - запросы по моделям:
      - CustomUser:
            url: 127.0.0.1:8000/api/user/[id]/
            методы:
                GET, POST, DELETE, PUT/PATCH - доступно только для администратора
      - Author:
            url: 127.0.0.1:8000/api/author/[id]/
            методы:
                GET - при передаче параметра user_id (localhost/api/video/?user_id=int) осуществляется поиск профиля
                автора по юзеру
                POST - юзер может создать только одного автора от своего имени (переопределен метод create())
                DELETE - юзер может удалить только своего автора (переопределен метод destroy())
                PUT/PATCH - переопределен метод update(), можно менять только "своего" автора
      - Subscription:
            url: 127.0.0.1:8000/api/subscription/[id]/
            методы:
                GET, POST
                DELETE - юзер может удалить только свою собственную подписку (переопределен метод destroy())
                PUT/PATCH - запрещен (переопределен метод update())
      - Video:
            url: 127.0.0.1:8000/api/video/[id]/
            методы:
                GET - при передаче параметра query (localhost/api/video/?query=string) осуществляется поиск видео
                по описанию, хэштегам, комментариям при помощи подключенного метода search_video() (см. search.py)
                GET - при передаче параметра author_id (localhost/api/video/?author_id=int) осуществляется поиск видео
                по автору
                POST
                DELETE - юзер может удалить только собственное видео (переопределен метод destroy())
                PUT/PATCH - юзер может редактировать только собственное видео (переопределен метод update())
      - Comment:
            url: 127.0.0.1:8000/api/comment/[id]/
            методы:
                GET - при передаче параметра author_id (localhost/api/video/?author_id=int) осуществляется поиск
                комментариев по автору
                GET - при передаче параметра video_id (localhost/api/video/?author_id=int) осуществляется поиск всех
                комментариев к видео
                POST
                DELETE - юзер может удалить только собственный комментарий (переопределен метод destroy())
                PUT/PATCH - юзер может редактировать только собственный комментарий (переопределен метод update())
      - Like:
            url: 127.0.0.1:8000/api/like/[id]/
            методы:
                GET - при передаче параметра author_id (localhost/api/video/?author_id=int) осуществляется поиск лайков
                по автору
                GET - при передаче параметра video_id (localhost/api/video/?author_id=int) осуществляется поиск всех
                лайков к видео
                POST
                DELETE - юзер может удалить только собственный лайк (переопределен метод destroy())
                PUT/PATCH - запрещен (переопределен метод update())
8. Публичные и приватные чаты: Websocket + Django Channels
    - /privatechat - приложение для чатов один-на-один. Сообщения сохраняются в БД (см. модель PrivateMesage).
      (!) Поле "isRead" необходимо для реализации функции уведомления юзера о непрочтенном сообщении.
    - /publicchat - приложение для публичных чатов. Добавлена модель PublicChat для сохранения в БД конкретных чатов.
      Функция сохранения сообщений в БД для публичных чатов может быть добавлена при необходимости.
      До подключения фронтенд-части на React данные приложения использовались, в том числе, для генерации представлений/
      шаблонов; в дальнейшем при работе над проектом пользовательский интерфейс был полностью перенесен на фронтенд.
9. Подключение отложенных задач: реализовано через signals и apscheduler
    - Рассылка email: осуществляется при наличии непрочитанных пуш-уведомлений в приватных чатах за предыдущие сутки
    (см. privatechat/management/runapscheduler.py)
    Запуск задач: python manage.py runapscheduler
    (!) Рассылка осуществляется при помощи яндекс-аккаунта, необходимо добавить в settings.py актуальный пароль.

    - Пуш-уведомления: реализованы на основе Django-Webpush и сигналов (privatechat/signals.py и utube_app/signals.py)
    Также есть форма для тестирования отправки уведомлений на стартовой странице.
    Пуш-уведомления отправляются:
        - при получении нового сообщения в приватном чате - адресату сообщения;
        - при выкладывании нового видео - всем подписавшимся на уведомления юзерам.

     - СМС с кодом подтверждения: подключены сервисы Twilio Messenger и Twilio Verify (! без ID).
     После регистрации нового юзера по сигналу (utube_app/signals.py, код закомменчен из-за отсутствия ID) отправляется
     смс с приветствием и/или смс с кодом подтверждения.
     Форма для кода подтверждения (utube_app/forms.py) находится на личной странице юзера: 127.0.0.1:8000/home/personal.
     Процесс подтверждения описан во вьюхе страницы (см. utube_app/views.py, частично закомментирован)
     После ввода кода поле phone_verified в модели CustomUser меняется на True, что разблокирует дополнительные
     возможности для пользователя: стать автором, менять аватары и т.д.
